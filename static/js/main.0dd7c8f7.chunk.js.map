{"version":3,"sources":["map.js","wiki.js","app.js","serviceWorker.js","index.js"],"names":["Map","props","ref","useRef","onClick","useEffect","current","options","nodes","shape","physics","onClickHandler","params","length","fetch","then","n","text","parseDOTNetwork","edges","data","r","json","m","forEach","label","id","value","size","group","Network","on","style","height","window","innerHeight","className","NotFound","node","Data","wiki","es","type","link","href","target","rel","info","Wiki","useState","setData","Welcome","role","aria-label","App","setNode","Fragment","GridContainer","GridRow","GridColumn","small","width","large","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0dd7c8f7.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nimport { Network, parseDOTNetwork } from 'vis-network/standalone';\n\nimport './app.css';\n\nexport default function Map(props) {\n\n  const ref = useRef();\n\n  const { onClick } = props;\n\n  useEffect(() => {\n\n    if (ref.current) {\n\n      var options = {\n        nodes: {\n          shape: \"dot\",\n        },\n        physics: false,\n      };\n\n      const onClickHandler = params => {\n        if (onClick && params.nodes.length > 0) {\n          onClick(params.nodes[0]);\n        }\n      }\n\n      fetch('data/network.dot')\n        .then((n) => n.text())\n        .then((n) => parseDOTNetwork(n))\n        .then((n) => ({ nodes: n.nodes, edges: n.edges }))\n        .then(data => {\n          fetch('data/metadata.json').then(r => r.json())\n            .then((m) => {\n              data.nodes.forEach(n => {\n                n.label = m[n.id]?.label || n.id;\n                n.value = m[n.id]?.size || 1;\n                n.group = m[n.id]?.group || 0;\n              });\n              let network = new Network(ref.current, data, options);\n              network.on(\"click\", onClickHandler);\n            })\n        })\n\n      ref.current.style.height = window.innerHeight + \"px\";\n    }\n  }, [onClick]);\n\n  return (\n    <div ref={ref} className=\"map\">\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport './wiki.css';\n\nfunction NotFound(props) {\n  return (\n    <div className=\"content\">\n      <h1>Ups... no hay info</h1>\n      <p>\n        No hay metadata asociada a <code>{props.node}</code>.\n      </p>\n      <br />\n      <p>\n        Si sos contributor y querés agregar la información, tenés que hacerlo en el archivo de configuration <code>metadata.json</code>.\n      </p>\n    </div>\n  );\n}\n\nfunction Data(props) {\n  return (\n    <div className=\"content\">\n      <h1>{props.node.label}</h1>\n      <h5>{props.node.wiki.es.type}</h5>\n      { props.node.link &&\n        <p>\n          <a href={`https://${props.node.link}`} target=\"_blank\" rel=\"noopener noreferrer\">{props.node.link}</a>\n        </p>\n      }\n      <p>\n        {props.node.wiki.es.info}\n      </p>\n      <br />\n      { props.node.wiki.es.link &&\n        <p>\n          Ver en <a href={props.node.wiki.es.link} target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a>.\n        </p>\n      }\n    </div>\n  );\n}\n\nexport default function Wiki(props) {\n\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    fetch('data/metadata.json').then(r => r.json()).then(setData)\n  }, []);\n\n  return (\n    <div className=\"wiki\">\n      {data[props.node]\n        ? <Data node={data[props.node]} />\n        : <NotFound node={props.node} />\n      }\n    </div>\n  );\n}\n","import React, { useState } from 'react';\n\nimport { GridContainer } from 'mini.css-react/dist/GridContainer';\nimport { GridColumn } from 'mini.css-react/dist/GridColumn';\nimport { GridRow } from 'mini.css-react/dist/GridRow';\n\nimport './app.css';\n\nimport Map from './map';\nimport Wiki from './wiki';\n\nfunction Welcome() {\n  return (\n    <div className=\"welcome\">\n      <h1><b>TECH</b><span>MAP</span></h1>\n      <h2>¡Hola bro!</h2>\n      <p>Como siempre decimos, hoy en día hay tantos nombrecitos dando vuelta que es muy fácil confundirse, y para los que recién comienzan o nuestros amigos los recruiters que tienen escuchar miles de estas palabras, puede ser muy complicado y hasta a veces imposible de asimilar todas y cada una de ellas. Es por eso que hicimos esta  herramienta, para que puedas ver todas las tecnologías más utlizadas, cómo se relacionan entre sí y puedas consultarlo cuando gustes. ¿Tenés dudas sobre una en particular? ¿Querés conocer detalles de cada una? hacé click sobre alguna de ellas y vas a ver más info.</p>\n      <p>¿Querés contribuir? te esperamos en <a href=\"https://github.com/tech-bros/techmap\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>.</p>\n      <br />\n      <p>Hecho con <span role=\"img\" aria-label=\"amor\">❤️</span> por los <a href=\"https://anchor.fm/techbros\" target=\"_blank\" rel=\"noopener noreferrer\">TECHBROS</a>.</p>\n    </div>\n  );\n}\n\nexport default function App() {\n\n  const [node, setNode] = useState(null);\n\n  return (\n    <React.Fragment>\n      <GridContainer>\n        <GridRow>\n          <GridColumn\n            className=\"map-column\"\n            small={{ width: 12 }}\n            large={{ width: 8 }}>\n            <Map onClick={setNode} />\n          </GridColumn>\n          <GridColumn\n            className=\"wiki-column\"\n            small={{ width: 12 }}\n            large={{ width: 4 }}>\n            {node\n              ? <Wiki node={node} />\n              : <Welcome />\n            }\n          </GridColumn>\n        </GridRow>\n      </GridContainer>\n    </React.Fragment>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}